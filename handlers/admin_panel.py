from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db import AsyncSessionLocal
from models import User, Department, RoleEnum, Task, TaskStatusEnum
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func
import openpyxl
from io import BytesIO
from keyboards import main_menu

router = Router()

# -- FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (–∫–∞–∫ —Ä–∞–Ω–µ–µ) --
class DeptRenameFSM(StatesGroup):
    waiting_for_new_name = State()

class DeptCreateFSM(StatesGroup):
    waiting_for_name = State()

class AssignManagerFSM(StatesGroup):
    waiting_for_user_id = State()

@router.callback_query(F.data == "admin:departments")
async def admin_departments_menu(query: CallbackQuery):
    async with AsyncSessionLocal() as session:
        depts = (await session.execute(select(Department))).scalars().all()
    kb = InlineKeyboardBuilder()
    for d in depts:
        kb.button(text=f"{d.name}", callback_data=f"admin:dept:{d.id}")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="admin:add_department")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main_menu")
    kb.adjust(1)
    await query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏:", reply_markup=kb.as_markup())

@router.callback_query(F.data == "admin:add_department")
async def add_department_start(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞:")
    await state.set_state(DeptCreateFSM.waiting_for_name)

@router.message(F.text, DeptCreateFSM.waiting_for_name)
async def add_department_name(message: Message, state: FSMContext):
    name = message.text.strip()
    async with AsyncSessionLocal() as session:
        existing = (await session.execute(select(Department).where(Department.name == name))).scalar_one_or_none()
        if existing:
            await message.answer("–û—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
            return
        dept = Department(name=name)
        session.add(dept)
        await session.commit()
        await message.answer(f"–û—Ç–¥–µ–ª '{name}' —Å–æ–∑–¥–∞–Ω.")
    await state.clear()
    await show_departments_menu(message)

async def show_departments_menu(message_or_query):
    async with AsyncSessionLocal() as session:
        depts = (await session.execute(select(Department))).scalars().all()
    kb = InlineKeyboardBuilder()
    for d in depts:
        kb.button(text=f"{d.name}", callback_data=f"admin:dept:{d.id}")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="admin:add_department")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main_menu")
    kb.adjust(1)
    if hasattr(message_or_query, "message"):
        await message_or_query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏:", reply_markup=kb.as_markup())
    else:
        await message_or_query.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("admin:dept:"))
async def dept_detail_menu(query: CallbackQuery):
    dept_id = int(query.data.split(":")[-1])
    async with AsyncSessionLocal() as session:
        dept = await session.get(Department, dept_id)
    if not dept:
        await query.answer("–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"admin:dept_rename:{dept.id}")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin:dept_delete:{dept.id}")
    kb.button(text="üëî –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"admin:dept_assign_manager:{dept.id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:departments")
    kb.adjust(1)
    await query.message.edit_text(f"–û—Ç–¥–µ–ª: {dept.name}", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("admin:dept_rename:"))
async def dept_rename_start(query: CallbackQuery, state: FSMContext):
    dept_id = int(query.data.split(":")[-1])
    await state.update_data(dept_id=dept_id)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞:")
    await state.set_state(DeptRenameFSM.waiting_for_new_name)

@router.message(F.text, DeptRenameFSM.waiting_for_new_name)
async def dept_rename_save(message: Message, state: FSMContext):
    data = await state.get_data()
    dept_id = data.get("dept_id")
    new_name = message.text.strip()
    async with AsyncSessionLocal() as session:
        existing = (await session.execute(select(Department).where(Department.name == new_name))).scalar_one_or_none()
        if existing:
            await message.answer("–û—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
            return
        dept = await session.get(Department, dept_id)
        if not dept:
            await message.answer("–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        dept.name = new_name
        session.add(dept)
        await session.commit()
        await message.answer(f"–û—Ç–¥–µ–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'.")
    await state.clear()
    await show_departments_menu(message)

@router.callback_query(F.data.startswith("admin:dept_delete:"))
async def dept_delete_confirm(query: CallbackQuery):
    dept_id = int(query.data.split(":")[-1])
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin:dept_delete_confirm:{dept_id}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:departments")
    kb.adjust(2)
    await query.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª? –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã.", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("admin:dept_delete_confirm:"))
async def dept_delete(query: CallbackQuery):
    dept_id = int(query.data.split(":")[-1])
    async with AsyncSessionLocal() as session:
        dept = await session.get(Department, dept_id)
        if not dept:
            await query.answer("–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        await session.delete(dept)
        await session.commit()
    await query.answer("–û—Ç–¥–µ–ª —É–¥–∞–ª—ë–Ω")
    await show_departments_menu(query)

# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è ---

@router.callback_query(F.data.startswith("admin:dept_assign_manager:"))
async def assign_manager_start(query: CallbackQuery, state: FSMContext):
    dept_id = int(query.data.split(":")[-1])
    await state.update_data(dept_id=dept_id)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª–∞:")
    await state.set_state(AssignManagerFSM.waiting_for_user_id)

@router.message(F.text, AssignManagerFSM.waiting_for_user_id)
async def assign_manager_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    dept_id = data.get("dept_id")
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user.role = RoleEnum.manager
        user.department_id = dept_id
        session.add(user)
        await session.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª–∞.")
    await state.clear()
    await show_departments_menu(message)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---

@router.callback_query(F.data == "admin:users")
async def admin_users_menu(query: CallbackQuery):
    async with AsyncSessionLocal() as session:
        users = (await session.execute(select(User))).scalars().all()
    kb = InlineKeyboardBuilder()
    for u in users:
        kb.button(text=f"{u.username or u.id} [{u.role.value}]", callback_data=f"admin:user:{u.id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main_menu")
    kb.adjust(1)
    await query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("admin:user:"))
async def user_detail_menu(query: CallbackQuery):
    user_id = int(query.data.split(":")[-1])
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
    if not user:
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not user.is_active else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin:user_toggle_active:{user.id}")
    kb.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞", callback_data=f"admin:user_role_admin:{user.id}")
    kb.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"admin:user_role_manager:{user.id}")
    kb.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"admin:user_role_employee:{user.id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")
    kb.adjust(1)
    await query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or user.id}\n–†–æ–ª—å: {user.role.value}\n–ê–∫—Ç–∏–≤–µ–Ω: {user.is_active}", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("admin:user_toggle_active:"))
async def toggle_user_active(query: CallbackQuery):
    user_id = int(query.data.split(":")[-1])
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user.is_active = not user.is_active
        session.add(user)
        await session.commit()
        await query.answer(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {user.is_active}")
    await user_detail_menu(query)

@router.callback_query(F.data.startswith("admin:user_role_"))
async def change_user_role(query: CallbackQuery):
    parts = query.data.split(":")
    role_str = parts[1].split("_")[-1]
    user_id = int(parts[-1])
    if role_str not in RoleEnum.__members__:
        await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        return
    new_role = RoleEnum(role_str)
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user.role = new_role
        session.add(user)
        await session.commit()
        await query.answer(f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role.value}")
    await user_detail_menu(query)

# --- –ê–¥–º–∏–Ω –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---

@router.callback_query(F.data == "admin:main_menu")
async def admin_main_menu(query: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")
    kb.button(text="üè¢ –û—Ç–¥–µ–ª—ã", callback_data="admin:departments")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
    kb.button(text="üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (XLSX)", callback_data="admin:export_stats")
    kb.adjust(1)
    await query.message.edit_text("–ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=kb.as_markup())
# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---

async def calculate_stats(session, user=None, department=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
    - points
    - total_tasks
    - avg_time_hours (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á)
    """
    filters = []
    if user:
        filters.append(Task.assigned_to == user.id)
    if department:
        filters.append(Task.department_id == department.id)

    # –û—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è user) –∏–ª–∏ —Å—É–º–º—ã –æ—á–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É (–¥–ª—è department) —Å—á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    if user:
        points = user.points
    elif department:
        users_in_dept = (await session.execute(select(User.points).where(User.department_id == department.id))).scalars().all()
        points = sum(users_in_dept)
    else:
        points = None

    q = select(Task).where(*filters) if filters else select(Task)
    tasks = (await session.execute(q)).scalars().all()

    total_tasks = len(tasks)

    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–æ —Å–¥–∞—á–∏ = –æ—Ç in_progress –¥–æ done)
    times = []
    for task in tasks:
        if task.status == TaskStatusEnum.done or task.status == TaskStatusEnum.escalated or task.status == TaskStatusEnum.overdue:
            # –ë–µ—Ä–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É created_at –∏ updated_at, –∫–∞–∫ —É–ø—Ä–æ—â–µ–Ω–∏–µ
            delta = (task.updated_at - task.created_at).total_seconds()
            if delta > 0:
                times.append(delta)
    avg_time_hours = round(sum(times)/len(times)/3600, 2) if times else 0

    return {
        "points": points if points is not None else 0,
        "total_tasks": total_tasks,
        "avg_time_hours": avg_time_hours
    }

@router.callback_query(F.data == "stats:personal")
async def personal_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or not user.is_active:
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã", show_alert=True)
            return
        stats = await calculate_stats(session, user=user)
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ë–∞–ª–ª—ã: {stats['points']}\n"
        f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['avg_time_hours']} —á."
    )
    await callback.message.edit_text(text, reply_markup=main_menu(user.role))

@router.callback_query(F.data == "stats:department")
async def department_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or user.role not in [RoleEnum.manager, RoleEnum.admin] or not user.is_active:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        if not user.department:
            await callback.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ—Ç–¥–µ–ª—É", show_alert=True)
            return
        stats = await calculate_stats(session, department=user.department)
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª–∞ '{user.department.name}':\n"
        f"–ë–∞–ª–ª—ã: {stats['points']}\n"
        f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['avg_time_hours']} —á."
    )
    await callback.message.edit_text(text, reply_markup=main_menu(user.role))

@router.callback_query(F.data == "stats:admin")
async def admin_stats_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="stats:admin:departments")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="stats:admin:users")
    kb.button(text="üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ XLSX", callback_data="stats:admin:export")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    kb.adjust(1)
    await callback.message.edit_text("–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", reply_markup=kb.as_markup())

@router.callback_query(F.data == "stats:admin:departments")
async def admin_stats_departments(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        departments = (await session.execute(select(Department))).scalars().all()
        text_lines = []
        for d in departments:
            stats = await calculate_stats(session, department=d)
            text_lines.append(f"{d.name}:\n –ë–∞–ª–ª—ã: {stats['points']}, –ó–∞–¥–∞—á: {stats['total_tasks']}, –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time_hours']} —á.")
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:\n\n" + "\n\n".join(text_lines)
    await callback.message.edit_text(text, reply_markup=main_menu(RoleEnum.admin))

@router.callback_query(F.data == "stats:admin:users")
async def admin_stats_users(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        users = (await session.execute(select(User).where(User.is_active == True))).scalars().all()
        text_lines = []
        for u in users:
            stats = await calculate_stats(session, user=u)
            text_lines.append(f"{u.username or u.id}:\n –ë–∞–ª–ª—ã: {stats['points']}, –ó–∞–¥–∞—á: {stats['total_tasks']}, –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time_hours']} —á.")
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n" + "\n\n".join(text_lines)
    await callback.message.edit_text(text, reply_markup=main_menu(RoleEnum.admin))

@router.callback_query(F.data == "stats:admin:export")
async def admin_export_stats(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        users = (await session.execute(select(User).where(User.is_active == True))).scalars().all()
        departments = (await session.execute(select(Department))).scalars().all()

        wb = openpyxl.Workbook()
        # –õ–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ws_users = wb.active
        ws_users.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        ws_users.append(["ID", "Username", "–†–æ–ª—å", "–û—Ç–¥–µ–ª", "–ë–∞–ª–ª—ã", "–í—Å–µ–≥–æ –∑–∞–¥–∞—á", "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—á)"])

        for u in users:
            stats = await calculate_stats(session, user=u)
            ws_users.append([
                u.id,
                u.username or "",
                u.role.value,
                u.department.name if u.department else "",
                stats['points'],
                stats['total_tasks'],
                stats['avg_time_hours']
            ])

        # –õ–∏—Å—Ç –æ—Ç–¥–µ–ª–æ–≤
        ws_depts = wb.create_sheet("–û—Ç–¥–µ–ª—ã")
        ws_depts.append(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–∞–ª–ª—ã", "–í—Å–µ–≥–æ –∑–∞–¥–∞—á", "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—á)"])
        for d in departments:
            stats = await calculate_stats(session, department=d)
            ws_depts.append([
                d.id,
                d.name,
                stats['points'],
                stats['total_tasks'],
                stats['avg_time_hours']
            ])

        bio = BytesIO()
        wb.save(bio)
        bio.seek(0)

        await callback.message.answer_document(
            document=bio,
            filename="statistics.xlsx",
            caption="–í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
